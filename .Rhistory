Sys.getenv("R_ENVIRON")
ls
?pdflatex
??pdflatex
Sys.getenv("R_HOME")
Sys.getenv("PATH")
Sys.which("pdflatex")
MikTex Update (Admin)
library(tidyverse)
library(tidyverse)
suppressPackageStartupMessages(library(gapminder))
suppressPackageStartupMessages(library(scales))
knitr::opts_chunk$set(fig.width = 5, fig.height = 2, fig.align = "center")
knitr::opts_chunk$set(fig.align = "center")
knitr::opts_chunk$set(error = TRUE)
gapminder %>%
filter(year == 2007) %>%
mutate(continent = fct_infreq(continent)) %>%
ggplot(aes(continent)) +
geom_bar() +
theme_bw()
(mauna <- tsibble::as_tsibble(co2) %>%
rename(month = index, conc = value))
ggplot(mauna, aes(month, conc)) +
geom_line()
ggplot(mauna, aes(month, conc)) +
geom_line()+
theme_bw()
ggplot(mauna, aes(month, conc)) +
geom_line()+
theme_bw()+
scale_x_identity(breaks=seq(1960,2020,5))
ggplot(mauna, aes(month, conc)) +
geom_line()+
theme_bw()+
scale_x_continuous(breaks=seq(1960,2020,5))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(gapminder))
suppressPackageStartupMessages(library(scales))
suppressPackageStartupMessages(library(tsibble))
knitr::opts_chunk$set(fig.align = "center")
ggplot(mauna, aes(month, conc)) +
geom_line()+
theme_bw()+
scale_x_continuous(breaks=seq(1960,2020,5))
(mauna <- tsibble::as_tsibble(co2) %>%
rename(month = index, conc = value))
ggplot(mauna, aes(yearmonth(month), conc)) +
geom_line()+
theme_bw()+
scale_x_continuous(breaks=seq(1960,2020,5))
ggplot(mauna, aes(month, conc)) +
geom_line()+
theme_bw()
#scale_x_continuous(breaks=seq(1960,2020,5))
par("usr")
ggplot(mauna, aes(month, conc)) +
geom_line()+
theme_bw()
#scale_x_continuous(breaks=seq(1960,2020,5))
par("usr")
?par
ggplot(mauna, aes(y = month)) +
geom_line(aes(x=month,y=conc))
ggplot(mauna, aes(y = month)) +
geom_line(aes(x=month,y=conc))+
ylab("CO2")
(p <- ggplot(mauna, aes(month, conc)) +
geom_line()+
theme_bw())
p +
geom_point(colour = green)
p +
geom_point(colour = "green")
p +
geom_line(colour = "green")
ggplot(gapminder) +
geom_point(aes(x = gdpPercap, y = lifeExp), alpha = 0.1)
tt1 <- ggplot(mauna, aes(y = month)) +
geom_line(aes(x=month,y=conc))+
ylab("CO2")
tt1$scales
tt1$scales$get_scales
tt1$scales$scales
tt2 <- tt1$scales$scales
tt1 <- ggplot(mauna, aes(y = month)) +
geom_line(aes(x=month,y=conc))+
ylab("CO2")
tt2 <- tt1$scales$scales
tt2 <- tt1$scales$get_scales(tt1)
tt1
tt1$labels
tt1$labels$x
tt1$labels$y
tt1$scales
tt1$scales$
?get_scales
?get_scales
tt1$scales$get_scales
tt1$scales$get_scales()
tt1$scales$get_scales
tt1$scales$scales[[1]]
tt1$scales[[1]]
tt1$scales
tt2 <- tt1$scales
tt2
tt2$input
tt1$layers
tt1$mapping
tt1$plot_env
tt1$labels
tt1$data
tt1$layers
class(tt1$layers)
tt1$layers
tt1$coordinates
class(tt1$coordinates)
class(tt1$scales)
tt2 <- ggplot_build(tt1)
tt2
tt2$data
tt2$layout$xlabel
tt2$layout
tt2$plot$scales
tt2$plot$scales$scales
tt2$plot$scales
tt2 <- ggplot_build(gg)
tt2 <- ggplot_build(tt1)
tt2$plot$scales
(tt1 <- ggplot(mauna, aes(y = month)) +
geom_line(aes(x=month,y=conc))+
ylab("CO2"))
tt2$plot$scales
tt2$plot$scales$scales
tt2$plot$scales$scales[[1]]
tt2$plot$scales$n
tt2$plot$scales$n()
tt2$plot$scales$get_scales()
tt2$plot$scales
tt2$plot$scales$find()
tt2$plot$scales$find(aes(x=month,y=conc))
tt2$plot$scales
tt2$plot$scales$non_position_scales()
tt2$plot$scales$non_position_scales()
tt2$plot$scales$non_position_scales
tt2$plot$scales$find
tt2$plot$scales
tt2$plot$scales$clone()
tt2$plot$scales$has_scale()
tt2$plot$scales
tt2$plot$scales$input()
tt2$plot$scales$n
tt2$plot$scales$n()
tt2$plot$scales
tt2$plot$scales$scales
tt2$layout$
tt2$layout$panel_scales_x
tt2$layout
tt2$layout$limits
tt2$layout
tt2$layout$xlabel
tt2$layout$xlabel()
tt2$layout$layout
tt2$layout
tt2$layout$coord_params
str(tt1)
str(tt2)
class(tt1)
ggplot_build(tt1)$panel$ranges[[1]]
ggplot_build(tt1)$panel
tt2$an
ggplot_build(tt1)$layout$panel_ranges[[1]]
ggplot_build(tt1)$layout
tt2$layout$panel_params
(tt1 <- ggplot(mauna, aes(y = month)) +
geom_line(aes(x=month,y=conc))+
ylab("CO2"))
tt2$layout$panel_params
tt2$layout$panel_params[[1]]$x.major
class(tt2$layout$panel_params[[1]]$x.major)
